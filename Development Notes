Former notes:

Http request: 
You need to specify the type of message receiced ( I'm using httpclient ), for my app, I receive json when req success and httperrorresponse when failed, json is default, we need to specify the type =>(err: httperrorresponse).

Changes may not be detected by angular!!:
For example, if in ur current component, you bind some local vals with some vals encapsulated in some outside structures like service, angular will not detect the changes. You need to realize { OnCheck } with ur own logic.

unsubscribe is always IMPORTANT!

Cross origin request need extra support in Node.js (add headers in app.js).

Feb, 23, 2018

My app structure is like 
back-end: localhost:3000,
angular localhost:4200,
user access to angular and angular process user data with api from backend.
For SPA like this, we can't directly use sessions or cookies like authentication. We have to build this by ourselves.
Try something including { jwt, "localstorage", httpinterceptor } today.
review: [forget to add 'secret' when calling jsonwebtoken.verify, idiot!!!!!read doc carefully!!]
update: [This way works!]

Feb, 27, 2018

Angular automatic tranform json to object, but for typescript, "forEach" method is only able to be use on "Array". We can use "let * of **" to traverse object from json array.
For router in node.js, if you want to pass some vals from middleware to next route, one simple method is to attach new vals to req.

Things confused:
NgModel binds dfferent things in different element ???
host binding and host listener ??? (solved)
If I show some local val through angular, and these local vals are bond to outer objects, are there any simple ways to monitor the changes of outer objects except checking it in "DoCheck"??? (2/27/2018)

Feb, 28, 2018

If not specified, the buttons in the form in angular will be defaultly added "submit" type. So if you want to have some functional buttons, set type to "button".
If you only want to accept one msg throw a obeservable, use "first()" or "take(1)" operators in rxjs.

Future works:
CSS!!!
